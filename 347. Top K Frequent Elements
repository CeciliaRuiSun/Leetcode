class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] ret = new int[k];
        Map<Integer, Integer> map = new HashMap<>();
        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> Integer.compare(a.cnt, b.cnt));
        
        // store (num, count) to hashmap
        for(int n: nums){
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        
        // put (key, value) to pq
        for(Integer key: map.keySet()){
            pq.offer(new Node(key, map.get(key)));
            if(pq.size() > k) pq.poll();
        }
        
        // write pq nodes' value to output array
        int i = 0;
        while(i < k){
            ret[i] = pq.poll().key;
            i ++;
        }
        
        return ret;
    }
}


class Node{
    int key;
    int cnt;
    
    public Node(){};
    
    public Node(int k, int c){
        this.key = k;
        this.cnt = c;
    }
}






// Runtime: 30 ms, faster than 9.69%
// Memory Usage: 46.3 MB, less than 40.40%

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] ret = new int[k];
        Map<Integer, Integer> map = new HashMap<>();        
        for(int n: nums){
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>((a,b) -> Integer.compare(a.getValue(), b.getValue()));
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            minHeap.add(entry);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }
        
        for(int i = 0; i < k; i ++){
            ret[i] = minHeap.poll().getKey();
        }
        
        return ret;
    }
}


// solution2 bucket sort
// Runtime: O(n) 23 ms, faster than 21.44% 
// Memory Usage:  O(n) 47.6 MB, less than 16.86%
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] ret = new int[k];
        List<Integer>[] buckets = new List[nums.length + 1];
        
        Map<Integer, Integer> map = new HashMap<>();        
        for(int n: nums){
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        
        // put frequency to buckets array
        for(int key: map.keySet()){
            int v = map.get(key);
            if(buckets[v] == null){
                buckets[v] = new LinkedList<>();
            }
            buckets[v].add(key);
        }
        
        // extract top k frequent items from buckets
        int cnt = k;
        for(int i = buckets.length - 1; i >= 0; i --){
            if(cnt == 0){
                break;
            }
            List<Integer> temp = buckets[i];
            if(temp == null){
                continue;
            } else{
                for(int j = 0; j < temp.size(); j ++){
                    ret[cnt - 1] = temp.get(j);
                    cnt --;
                    if(cnt == 0) break;
                }
            }
        }
    
        
        return ret;
    }
}
