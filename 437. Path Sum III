// Runtime: 21 ms, faster than 37.59%
// Memory Usage: 38.7 MB, less than 91.55%

class Solution {
    private int ret = 0;
    
    public int pathSum(TreeNode root, int targetSum) {
        if(root == null){
            return ret;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            ret += helper(temp, targetSum, 0);            
            if(temp.left != null){
                queue.add(temp.left);
            }
            if(temp.right != null){
                queue.add(temp.right);
            }
        }
        
        return ret;
    }
    
    private int helper(TreeNode root, int targetSum, int cnt){
        if(root == null){
            return cnt;
        }
        
        if(root.val == targetSum){
            cnt ++;
        }
        
        int cntLeft = helper(root.left, targetSum - root.val, cnt);
        int cntRight = helper(root.right, targetSum - root.val, cntLeft);
        
        return cntRight;
    }
}


// 
class Solution { 
    int cnt = 0;
    
    public int pathSum(TreeNode root, int targetSum) {
        if(root == null) return cnt;
        dfs(root, targetSum);
        pathSum(root.left, targetSum);
        pathSum(root.right, targetSum);
        return cnt;
    }
    
    private void dfs(TreeNode root, int targetSum){
        if(root == null) return;
        if(root.val == targetSum){
            cnt ++;
        }
        
        dfs(root.left, targetSum - root.val);
        dfs(root.right, targetSum - root.val);
    }
}
