class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null) return null;
        
        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);
        TreeNode temp = right;
        root.left = right;
        root.right = left;
        
        return root;
    }   
}


//
class Solution {
    public TreeNode invertTree(TreeNode root) {
        // Runtime: 0 ms, faster than 100.00%
        // Memory Usage: 36.2 MB, less than 89.67%
        
        if(root == null){
            return null;
        }
        TreeNode temp = new TreeNode();
        temp = root.left;
        root.left = root.right;
        root.right = temp;
        
        invertTree(root.left);
        invertTree(root.right);
        return root;
    }

}

// Runtime: 0 ms, faster than 100.00%
// Memory Usage: 38.5 MB, less than 23.48% 

class Solution {
    public TreeNode invertTree(TreeNode root) {
        return helper(root, new TreeNode());
    }
    
    private TreeNode helper(TreeNode root, TreeNode ret){
        if(root == null){
            return null;
        }
        ret.val = root.val;
        ret.left = helper(root.right, new TreeNode());
        ret.right = helper(root.left, new TreeNode());
        return ret;
    }
}
