// Runtime: 4 ms, faster than 62.15%
// Memory Usage: 39.7 MB, less than 36.52%

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> ret = new LinkedList<>();
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        dfs(root, 0, 0, map);
        for(int x: map.keySet()){
            ret.add(new LinkedList<>());
            for(int y: map.get(x).keySet()){
                PriorityQueue<Integer> pq = map.get(x).get(y);
                while(!pq.isEmpty()){
                    ret.get(ret.size() - 1).add(pq.poll());
                }
            }
        }
            
        return ret;
    }
    
    private void dfs(TreeNode root, int x, int y, TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map){
        if(root == null)  return;
        map.putIfAbsent(x, new TreeMap<>());
        map.get(x).putIfAbsent(y, new PriorityQueue<>());
        
        map.get(x).get(y).add(root.val);
        
        dfs(root.left, x - 1, y + 1, map);
        dfs(root.right, x + 1, y + 1, map);
    }
}


