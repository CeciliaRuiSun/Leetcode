// Runtime: 4 ms, faster than 36.43%
// Memory Usage: 39.4 MB, less than 67.07%

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp1 = l1, temp2 = l2, ret = new ListNode();
        ListNode dummy = ret;
        Stack<Integer> stk = new Stack<>();
        Stack<Integer> stk1 = new Stack<>();
        Stack<Integer> stk2 = new Stack<>();
        int carry = 0;
        
        while(temp1 != null){
            stk1.push(temp1.val);
            temp1 = temp1.next;
        }
        
        while(temp2 != null){
            stk2.push(temp2.val);
            temp2 = temp2.next;
        }
        
        while(!stk1.isEmpty() || !stk2.isEmpty() || carry != 0){
            if(!stk1.isEmpty()){
                carry += stk1.pop();
            }
            
            if(!stk2.isEmpty()){
                carry += stk2.pop();
            }
            
            if(carry < 10){
                stk.push(carry);
                carry = 0;
            } else{
                stk.push(carry % 10);
                carry = carry / 10;
            }
        }
        
        while(!stk.isEmpty()){
            
            dummy.next = new ListNode(stk.pop());
            dummy = dummy.next;
                     
        }
        
        return ret.next;
    }
}
