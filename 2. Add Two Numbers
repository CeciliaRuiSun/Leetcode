// Runtime: 2 ms, faster than 72.34%
// Memory Usage: 39.5 MB, less than 53.03%

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode();
        ListNode pointer = head;
        int carry = 0;
        
        while(l1 != null && l2 != null){
            pointer.next = new ListNode();
            pointer = pointer.next;
            
            int sum = l1.val + l2.val + carry;
           // System.out.println("l1: " + l1.val);
           // System.out.println("l2: " + l2.val);
            //System.out.println("sum: " + sum);
            
            if(sum <= 9){
                pointer.val = sum;
                carry = 0;
            } else{
                pointer.val = sum % 10;
                //System.out.println("pointer: " + pointer.val);
                carry = 1;
            }
            
            l1 = l1.next;
            l2 = l2.next;
        }
        
        if(l1 != null){
            pointer.next = l1;
        }
        
        if(l2 != null){
            pointer.next = l2;
        }
        
        while(carry == 1 && pointer.next != null){
            if(pointer.next.val + carry <= 9){
                pointer.next.val += carry;
                carry = 0;
            } else{
                pointer.next.val = (pointer.next.val + carry) % 10;
                pointer = pointer.next;
            }
        }
        
        if(carry == 1){
            pointer.next = new ListNode(1);
        }
        
        return head.next;
    }
}
