// Runtime: 2 ms, faster than 72.34%
// Memory Usage: 39.5 MB, less than 53.03%

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp = new ListNode(0);
        ListNode head = temp;
        ListNode temp1 = l1, temp2 = l2;
        int carry = 0;
        
        while(temp1 != null || temp2 != null){
            int num1 = 0, num2 = 0;
            if(temp1 == null){
                num1 = 0;
            } else{
                num1 = temp1.val;
            }
            
            if(temp2 == null){
                num2 = 0;
            } else{
                num2 = temp2.val;
            }
            
            int sum = num1 + num2 + carry;
            
            if(sum > 9){
                carry = 1;
            } else{
                carry = 0;
            }
            
            temp.next = new ListNode(sum%10);
            temp = temp.next;
            if(temp1 != null) temp1 = temp1.next;
            if(temp2 != null) temp2 = temp2.next;
        }
        
        if(carry == 1){
            temp.next = new ListNode(1);
        }
        
        return head.next;
    }
}
 
 
 
 //
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode();
        ListNode pointer = head;
        int carry = 0;
        
        while(l1 != null && l2 != null){
            pointer.next = new ListNode();
            pointer = pointer.next;
            
            int sum = l1.val + l2.val + carry;
           // System.out.println("l1: " + l1.val);
           // System.out.println("l2: " + l2.val);
            //System.out.println("sum: " + sum);
            
            if(sum <= 9){
                pointer.val = sum;
                carry = 0;
            } else{
                pointer.val = sum % 10;
                //System.out.println("pointer: " + pointer.val);
                carry = 1;
            }
            
            l1 = l1.next;
            l2 = l2.next;
        }
        
        if(l1 != null){
            pointer.next = l1;
        }
        
        if(l2 != null){
            pointer.next = l2;
        }
        
        while(carry == 1 && pointer.next != null){
            if(pointer.next.val + carry <= 9){
                pointer.next.val += carry;
                carry = 0;
            } else{
                pointer.next.val = (pointer.next.val + carry) % 10;
                pointer = pointer.next;
            }
        }
        
        if(carry == 1){
            pointer.next = new ListNode(1);
        }
        
        return head.next;
    }
}



// solution 2
// Runtime: 2 ms, faster than 66.97%
// Memory Usage: 39.4 MB, less than 52.77%

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ret = new ListNode();
        ListNode temp = ret, temp1 = l1, temp2 = l2;
        int carry = 0;
        
        while(temp1 != null || temp2 != null || carry != 0){
            //System.out.println(temp1.val + " " + temp2.val + " " + carry);
            temp.next = new ListNode();
            temp = temp.next;
            
            if(temp1 != null){
                carry += temp1.val;
                temp1 = temp1.next;
            }
            
            if(temp2 != null){
                carry += temp2.val;
                temp2 = temp2.next;
            }
            
            if(carry < 10){
                temp.val = carry;
                carry = 0;
            } else{
                temp.val = carry % 10;
                carry = carry / 10;
            }
        }
        
        return ret.next;
    }
}


