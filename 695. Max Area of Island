class Solution {
    int[][] neighbors= {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    public int maxAreaOfIsland(int[][] grid) {
        int ret = 0;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        
        for(int i = 0; i < grid.length; i ++){
            for(int j = 0; j < grid[0].length; j ++){
                if(visited[i][j] || grid[i][j] == 0) continue;
                int cnt = dfs(grid, i, j, visited);
                ret = Math.max(cnt, ret);
            }
        }
        
        return ret;
    }
    
  
    private int dfs(int[][] grid, int i, int j, boolean[][] visited){
        if(visited[i][j] || grid[i][j] == 0) return 0;
        
        visited[i][j] = true;
        
        int z = 0;
        for(int[] node: neighbors){
            int x = node[0] + i;
            int y = node[1] + j;
            if(x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] == 1){               
                z += dfs(grid, x, y, visited);
                
            }
        }
        
        return z + 1;
    }
    
    /*
    private int dfs(int[][] grid, int i, int j, boolean[][] visited){
           
        if(i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1){               if(visited[i][j] || grid[i][j] == 0) return 0;
        
            visited[i][j] = true;
        
            return 1 + dfs(grid, i - 1, j, visited) + dfs(grid, i + 1, j, visited) + dfs(grid, i, j - 1, visited) + dfs(grid, i, j + 1, visited);
                
        }
        
        return 0;
       
    }
    
    */

    
}
