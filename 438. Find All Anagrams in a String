class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ret = new LinkedList<>();
        if(p.length() == 0 || s.length() == 0) return ret;
        
        //record count of each character in p
        int[] freq = new int[26];
        for(char c: p.toCharArray()){
            freq[c - 'a'] ++;
        }
        
        //two points, initialize count to p's length
        int left = 0, right = 0, count = p.length();
        
        while(right < s.length()){
        //move right everytime, if the character exists in p's freq, decrease the count
        //current frequency value >= 1 means the character is existing in p
            char cur = s.charAt(right);
            if(freq[cur - 'a'] >= 1){
                count --;
            }
            freq[cur - 'a'] --;
            right ++;
            
            //when the count is down to 0, means we found the right anagram
            //then add window's left to result list
            if(count == 0) ret.add(left);
            
            //if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window
            //++ to reset the hash because we kicked out the left
            //only increase the count if the character is in p
            //the count >= 0 indicate it was original in the hash, cuz it won't go below 0
            if(right - left == p.length()){
                if(freq[s.charAt(left) - 'a'] >= 0) {
                    count ++;
                } 
                
                freq[s.charAt(left) - 'a'] ++;
                left ++;
            }
        }
        
        return ret;
    }
}
