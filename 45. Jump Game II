// This is a BFS problem

class Solution {

    public int jump(int[] nums) {
        int jumps = 0, curEnd = 0, farthest = 0;
        for(int i = 0; i < nums.length - 1; i ++){
            farthest = Math.max(farthest, nums[i] + i);
            
            if(i == curEnd){
                curEnd = farthest;
                jumps++;
            }
            
        }
        
        return jumps;
    }
}

class Solution {

    public int jump(int[] nums) {
        if(nums.length == 1) return 0;
        int i = 0, curMax = 0, farthest = 0, jumps = 0;
        
        while(i < nums.length){
            for(; i <= curMax; i ++){
                farthest = Math.max(farthest, i + nums[i]);
                if(farthest >= nums.length - 1) return jumps + 1;
            }
            curMax = farthest;
            jumps ++;
        }
        return jumps;
    }
}
