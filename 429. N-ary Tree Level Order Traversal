// Runtime: 0 ms, faster than 100.00% 
// Memory Usage: 40 MB, less than 57.97%

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ret = new ArrayList<>();
        return DFS(ret, root, 0);
    }
    
    private List<List<Integer>> DFS(List<List<Integer>> ret, Node root, int level){
        if(root == null){
            return ret;
        }
        
        if(ret.size() == level){
            ret.add(new ArrayList<>());
        }
        
        ret.get(level).add(root.val);
        
        for(Node N: root.children){
            DFS(ret, N, level + 1);
        }
        
        return ret;
        
    }
}


// bfs
// Runtime: 4 ms, faster than 36.98% 
// Memory Usage: 44.3 MB, less than 14.72%
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ret =  new LinkedList<>();
        if(root == null) return ret;
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        
        while(!queue.isEmpty()){
            List<Integer> curLevel = new LinkedList<>();
            int size = queue.size();
            for(int i = 0; i < size; i ++){
                Node n = queue.poll();
                curLevel.add(n.val);
                for(Node node: n.children){
                    queue.add(node);
                }
            }
            ret.add(curLevel);
        }
        
        return ret;
    }

}
