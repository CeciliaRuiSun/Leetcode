// Runtime: 2 ms, faster than 99.90%
// Memory Usage: 40.3 MB, less than 69.04%

class Solution {
    // Explaination: https://www.youtube.com/watch?v=LPFhl65R7ww
    
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int x = nums1.length, y = nums2.length;
        if(x > y){
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int lo = 0, hi = x;
        while(lo <= hi){
            int partitionX = (lo + hi)/2;
            int partitionY = (x + y + 1)/2 - partitionX;
            
            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE: nums1[partitionX -  1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE: nums1[partitionX];
            
            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE: nums2[partitionY -  1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE: nums2[partitionY];
            
            if(maxLeftX <= minRightY && maxLeftY <= minRightX){
                if((x + y)%2 == 0){
                    return (double)(Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;
                } else{
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            } else if(maxLeftX > minRightY){
                hi = partitionX - 1;
            } else {
                lo = partitionX + 1;
            }
        }
        
        return 0.00;
    }
}
