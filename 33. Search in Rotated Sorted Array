// Runtime: 7 ms, faster than 5.18%
// Memory Usage: 39.1 MB, less than 47.77%

class Solution {
    public int search(int[] nums, int target) {
        if(nums[0] < nums[nums.length - 1]){
            return binarySearch(nums, target);
        }
        
        int max = nums[0], max_loc = 0, left = 0, right = nums.length - 1;
        while(left <= right){
            int mid = (left + right) / 2;
            //System.out.println("left: " + left + " right: " + right + " mid: " + mid + " max: " + max);
            if(nums[mid] > nums[left]){
                if(nums[mid] > max){
                    max_loc = mid;
                    max = nums[mid];
                }
                left = mid + 1;
            } else if(nums[mid] < nums[left]){
                right = mid - 1;
            } else if(nums[mid] == nums[left]){
                left = mid + 1;
                if(nums[mid] > max){
                    max_loc = mid;
                    max = nums[mid];
                }
            }
        }
        
        System.out.println("maxloc: " + max_loc);
        
        if(target > nums[0]){
            int[] subarray = new int[max_loc + 1];
            System.arraycopy(nums,0,subarray,0,max_loc + 1);
            
            return binarySearch(subarray, target);
        }
         else if(target < nums[0]){
            int[] subarray = new int[nums.length - max_loc - 1];
            System.arraycopy(nums,max_loc + 1,subarray,0,nums.length - max_loc - 1);
            //System.out.println("subarray: " + Arrays.toString(subarray));
            int ret = binarySearch(subarray, target);
            if(ret == -1){
                return -1;
            } else{
                return max_loc + 1 + ret;
            }
        } 
        
        return 0;
}        
    
    private int binarySearch(int[] nums, int target){
        int left = 0, right = nums.length - 1;
        while(left <= right){
            int mid = (left + right) / 2;
            if(nums[mid] == target){
                return mid;
            } else if(nums[mid] > target){
                right = mid - 1;
            } else{
                left = mid + 1;
            }           
        }
        
         return -1;
    }
}
