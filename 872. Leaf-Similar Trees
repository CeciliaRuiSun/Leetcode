// Runtime: 0 ms, faster than 100.00%
// Memory Usage: 36.8 MB, less than 61.39% 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> ls1 = leaves(root1, new ArrayList<>());
        List<Integer> ls2 = leaves(root2, new ArrayList<>());
        if(ls1.size() != ls2.size()){
            return false;
        }
        
        for(int i = 0; i < ls1.size(); i++){
            if(ls1.get(i) != ls2.get(i)){
                return false;
            }
        }
        
        return true;
    }
    
    private List<Integer> leaves(TreeNode root, List<Integer> ret){
        if(root == null){
            return ret;
        } 
        
        if(root.left == null && root.right == null){
            ret.add(root.val);
            return ret;
        } 
        
        if(root.left != null){
            leaves(root.left, ret);
        } 
        
        if(root.right != null ){
            leaves(root.right, ret);
        }
        
        return ret;
    }
}
