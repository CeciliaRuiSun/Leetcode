class MyStack {
    Queue<Integer> queue1;
    Queue<Integer> queue2;
    
    public MyStack() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }
    
    public void push(int x) {
        queue1.offer(x);
    }
    
    public int pop() {
        
        while(queue1.size() > 1){
            queue2.offer(queue1.poll());
            }
        int ret = queue1.poll();
        while(!queue2.isEmpty()){
            queue1.offer(queue2.poll());
        }
        
        return ret;
    }
    
    public int top() {
        while(queue1.size() > 1){
            queue2.offer(queue1.poll());
        }
        int ret = queue1.peek();
        queue2.offer(queue1.poll());
        while(!queue2.isEmpty()){
            queue1.offer(queue2.poll());
        }
        return ret;
    }
    
    public boolean empty() {
        return queue1.size() == 0;
    }
}


//

// Runtime: 1 ms, faster than 9.55% 
// Memory Usage: 38.4 MB, less than 26.64%

class MyStack {
        Queue<Integer> queue;
    
    public MyStack() {
        this.queue = new LinkedList<Integer>();
    }
    
    public void push(int x) {
        queue.add(x);
        for(int i = 0; i < queue.size() - 1; i ++){
            queue.add(queue.poll());
        }
    }
    
    public int pop() {
        return queue.poll();
    }
    
    public int top() {
        return queue.peek();
    }
    
    public boolean empty() {
        return queue.isEmpty();
    }
}
