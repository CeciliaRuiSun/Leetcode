//
class Solution { 
    public boolean isValidSudoku(char[][] board) {
        Map<Integer, Set<Character>> row = new HashMap<>();
        Map<Integer, Set<Character>> col = new HashMap<>();
        Map<Integer, Set<Character>> cube = new HashMap<>();
        
        for(int i = 0; i < 9; i++){
            row.put(i, new HashSet<>());
            col.put(i, new HashSet<>());
            cube.put(i, new HashSet<>());
        }
        
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                char cur = board[i][j];
                if(cur == '.') continue;
                if(row.get(i).contains(cur) || col.get(j).contains(cur) || cube.get(i/3 * 3 + j/3).contains(cur)){
                    return false;
                }
                row.get(i).add(cur);
                col.get(j).add(cur);
                cube.get(i/3 * 3 + j/3).add(cur);
            }
        }
        
        return true;
    }
}


// Runtime: 13 ms, faster than 30.54%
// Memory Usage: 39.9 MB, less than 51.47% 

class Solution {
    Set map = new HashSet();
    
    public boolean isValidSudoku(char[][] board) {
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                char c = board[i][j];
                if(c == '.'){
                    continue;
                }
                
                if(!map.add(c + "row" + i) 
                   || !map.add(c + "col" + j) 
                   || !map.add(c + "box" + i/3 + j/3)
                ){
                    return false;
                }
                
            }
        }
        
        return true;
    }
    
    
}
