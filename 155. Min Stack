class MinStack {
    Stack<Integer> stk;
    Stack<Integer> minStk;    // store min value so far for each element
    
    public MinStack() {
        stk = new Stack<>();
        minStk = new Stack<>();
    }
    
    public void push(int val) {
        stk.push(val);
        if(minStk.size() == 0 || minStk.peek() > val){
            minStk.push(val);
        } else{
            minStk.push(minStk.peek());
        }
    }
    
    public void pop() {
        stk.pop();
        minStk.pop();
    }
    
    public int top() {
        return stk.peek();
    }
    
    public int getMin() {
        return minStk.peek();
    }
}





//
class MinStack {
    int size = 0;
    int init = 10;
    int factor = 2;
    int[] stk;
    
    /** initialize your data structure here. */
    public MinStack() {
        stk = new int[init];
    }
    
    public void push(int x) {
        if(size == stk.length){
            int[] newstk = new int[size * factor];
            System.arraycopy(stk, 0, newstk, 0, size);
            stk = newstk;
        }
        
        stk[size] = x;
        size ++;
    }
    
    public void pop() {
        stk[size - 1] = 0;
        size --;
    }
    
    public int top() {
        return stk[size - 1];
    }
    
    public int getMin() {
        int min = stk[0];
        for(int i = 0; i < size; i ++){
            if(stk[i] < min){
                min = stk[i];
            }
        }
        return min;
    }
}


/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


class MinStack {
    private Stack<int[]> stack = new Stack<>();
    
    public MinStack() {

    }
    
    public void push(int x) {
        if(stack.isEmpty()){
            stack.push(new int[]{x,x});
            return;
        }
        
        int currentMin = stack.peek()[1];
        stack.push(new int[]{x, Math.min(x, currentMin)});
    }
    
    public void pop() {
        stack.pop();
    }
    
    public int top() {
        return stack.peek()[0];
    }
    
    public int getMin() {
        return stack.peek()[1];
    }

}



// Runtime: 132 ms, faster than 6.91%
// Memory Usage: 40.4 MB, less than 95.72%

class MinStack {
    Node head;
    int size = 0;
    
    public MinStack() {
        head = new Node();
    }
    
    public void push(int val) {
        Node temp = new Node(val);
        temp.next = head;
        head = temp;
        
        size ++;
    }
    
    public void pop() {
        head = head.next;
        size --;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {        
        Node n = head;
        int min = n.val;
        
        int pointer = 0;
        while(pointer < size - 1){
            if(n.next.val < min){
                min = n.next.val;
            }
            n = n.next;
            pointer ++;
        }
        return min;
    }
    
    private class Node{
        int val;
        Node next;
        
        public Node(){
            
        }
        
        public Node(int v){
            val = v;
        }
    }
}

