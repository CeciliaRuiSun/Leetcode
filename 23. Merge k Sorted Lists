// Runtime: 4 ms, faster than 81.52%
// Memory Usage: 40.9 MB, less than 46.62%

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        
        ListNode dummy = new ListNode();
        ListNode cur = dummy;
        
        PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length,(a,b) -> Integer.compare(a.val, b.val));
                
        for (ListNode node: lists){
            if(node != null){
                pq.add(node);
            }
        }
            
        while(!pq.isEmpty()){
            cur.next = pq.poll();
            if(cur.next.next != null){
                pq.add(cur.next.next);
            }
            
            cur = cur.next;                        
        }
        
        return dummy.next;
    }
}
