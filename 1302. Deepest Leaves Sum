// Runtime: 1 ms, faster than 97.43%
// Memory Usage: 41.9 MB, less than 57.88%

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 // DFS
class Solution {
    int deepest = 0;
    int sum =0;
    
    public int deepestLeavesSum(TreeNode root) {
        dfs(root, 0);
        return sum;
    }
    
    private void dfs(TreeNode root, int level){
        if(root == null) return;
        if(level > deepest){
            sum = root.val;
            deepest = level;
        } else if(level == deepest){
            sum += root.val;
        }
        dfs(root.left, level + 1);
        dfs(root.right, level + 1);
    }
}

// BFS
class Solution {
    
    public int deepestLeavesSum(TreeNode root) {
        int sum=0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            sum = 0;
            int size = queue.size();
            for(int i = 0; i < size; i ++){
                TreeNode temp = queue.poll();                
                sum += temp.val;               
                if(temp.left != null){
                    queue.add(temp.left);
                }
                if(temp.right != null){
                    queue.add(temp.right);
                }
            }
        }
        
        return sum;
    }
}
