/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<TreeNode, Integer> map = new HashMap<>();
    
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ret = new LinkedList<>();
        
        find(root, target);
        dfs(root, k, map.get(root), ret);
        return ret;
    }
    
    private int find(TreeNode root, TreeNode target){
        if(root == null) return -1;
        
        if(root == target){
            map.put(root, 0);
            return 0;
        }
        
        int left = find(root.left, target);
        if(left >= 0){
            map.put(root, left + 1);
            return left + 1;
        }
        
        int right = find(root.right, target);
        if(right >= 0){
            map.put(root, right + 1);
            return right + 1;
        }
        
        return -1;
    }
    
    private void dfs(TreeNode root, int k, int length, List<Integer> ret){
        if(root == null) return;
        if(map.containsKey(root)) length = map.get(root);
        if(length == k) ret.add(root.val);
        dfs(root.left, k, length + 1, ret);
        dfs(root.right, k, length + 1, ret);
    }
}
