// Runtime: 2 ms, faster than 99.98%
// Memory Usage: 47.2 MB, less than 77.46%

class Solution {
    public int numIslands(char[][] grid) {
        int row = grid.length, col = grid[0].length;
        int cnt = 0;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j ++){
                if(grid[i][j] == '1'){
                    dfsFill(grid, i, j);
                    cnt ++;
                }
            }
        }
        
        return cnt;
    }
    
    private void dfsFill(char[][] grid, int i, int j){
        if(i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == '1'){
            grid[i][j] = '0';
            dfsFill(grid, i, j - 1);
            dfsFill(grid, i - 1, j);
            dfsFill(grid, i, j + 1);
            dfsFill(grid, i + 1, j);
        }
    }
}


// bfs

class Solution {
    public int numIslands(char[][] grid) {
        int row = grid.length, col = grid[0].length;
        int cnt = 0;
        boolean[][] visited = new boolean[row][col];
        Queue<int[]> queue = new LinkedList<>();
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(grid[i][j] == '1' && !visited[i][j]){
                    visited[i][j] = true;
                    queue.add(new int[] {i, j});
                    bfs(grid, queue, visited);
                    
                    cnt ++;
                }
            }
        }
        
        return cnt;
    }
    
    int[][] neighbors = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    private void bfs(char[][] grid, Queue<int[]> queue, boolean[][] visited){
        
        while(!queue.isEmpty()){
            int[] cur = queue.poll();
        
            for(int[] num: neighbors){
                int x = num[0] + cur[0];
                int y = num[1] + cur[1];

                if(x >=0 && x < grid.length && y >= 0 && y < grid[0].length && !visited[x][y] && grid[x][y]== '1'){
                    visited[x][y] = true;
                    queue.add(new int[]{x,y});
                }
            }
        }
    }
}
