/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // Time: O(n)
    // Space: O(n)
    
    public boolean isValidBST(TreeNode root) {
        
        return helper(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    private boolean helper(TreeNode root, long min, long max){
        if(root == null){
            return true;
        }
        
        if(root.val >= max || root.val <= min){
            return false;
        }
        
        return helper(root.left, min, root.val) && helper(root.right, root.val, max);
    }
    
}

Solution2: first use inorder traversal, store in an array and see if they are sorted.
// Runtime: 1 ms, faster than 39.82%
// Memory Usage: 38.7 MB, less than 54.27% 

class Solution {
    // Time: O(n)
    // Space: O(n)
    
    private List<Long> ls = new ArrayList<>();
    
    public boolean isValidBST(TreeNode root) {
        helper(root);
        for(int i = 0; i < ls.size() - 1; i++){
            if(ls.get(i) >= ls.get(i + 1)){
                return false;
            }
        }
        
        return true;
    }
    
    private void helper(TreeNode root){
        if(root == null){
            return;
        }
        
        helper(root.left);
        ls.add((long)root.val);
        helper(root.right);
    }
    

}


