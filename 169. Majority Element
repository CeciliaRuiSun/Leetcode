// Boyer-Moore Voting Algorithm
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int cur = Integer.MAX_VALUE;
        
        for(int n: nums){
            if(n == cur){
                count ++;
            } else if(count == 0){
                count = 1;
                cur = n;
            } else{
                count --;
            }
        }
        
        return cur;
    }
}



class Solution {
    // Runtime: 8 ms, faster than 40.87%
    // Memory Usage: 44.5 MB, less than 28.65%
    
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> ret = new HashMap<Integer,Integer>();
        for(int i = 0; i < nums.length; i ++){
            if(ret.containsKey(nums[i])){
                int count = ret.get(nums[i]);
                ret.put(nums[i], count + 1);
            } else{
                ret.put(nums[i],1);
            }
            
        } 
        
        int result = 0;
        for (Integer n: ret.keySet()){
            if(ret.get(n) > nums.length / 2){
                result = n;
                break;
            }
        }
        return result;
    }
}



// Runtime: 5 ms, faster than 40.56%
// Memory Usage: 54.2 MB, less than 21.02%
class Solution {
    public int majorityElement(int[] nums) {
        int len = nums.length;
        Arrays.sort(nums);
        return nums[len/2];
    }
}

// Moore Voting Algorithm
//
public class Solution {
    public int majorityElement(int[] num) {

        int major=num[0], count = 1;
        for(int i=1; i<num.length;i++){
            if(count==0){
                count++;
                major=num[i];
            }else if(major==num[i]){
                count++;
            }else count--;
            
        }
        return major;
    }
}
