// Runtime: 2 ms, faster than 27.87%,  nlog(n)
// Memory Usage: 39.2 MB, less than 69.06%
// 


class Solution {
    int[] ret = new int[2];
    public int[] twoSum(int[] numbers, int target) {
        int len = numbers.length;
        for(int i = 0; i < len; i++){
            if(target - numbers[i] == numbers[i] && numbers[i + 1] == numbers[i]){       // if two nums are the same
                ret[0] = i + 1;
                ret[1] = i + 1 + 1;
                return ret;
            }
            
            if(findnum(numbers, target - numbers[i], i + 1, len - 1)){
                ret[0] = i + 1;
                break;
            }
        }
        
        return ret;
    }
    
    private boolean findnum(int[] numbers, int n, int low, int high){
        if(low > high){
            return false;
        }
        
        int mid = (low + high) / 2;
        if(numbers[mid] == n){              // when find the other number, write in ret and return true;
            ret[1] = mid + 1;
            return true;
        }
        
        if(numbers[mid] > n){
            return findnum(numbers, n, low, mid - 1);
        }
        
        if(numbers[mid] < n){
            return findnum(numbers, n, mid + 1, high);
        }
       
        return true;
    }
}

//
class Solution {
    
    public int[] twoSum(int[] numbers, int target) {
        int[] ret = new int[2];
        for(int i = 0; i < numbers.length; i++){
            int j = search(numbers, target - numbers[i], i);
            if(j != -1){
                ret[0] = Math.min(i,j) + 1;
                ret[1] = Math.max(i,j) + 1;
                break;
            }
        }
        
        return ret;
    }
    
    private int search(int[] num, int target, int index){
        int left = 0, right = num.length-1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            
            if(num[mid] != target){
                if(num[mid] < target){
                    left = mid + 1;
                } else{
                    right = mid - 1;
                }
            } else if(num[mid] == target && mid != index){
                return mid;
            } else{
                if(mid + 1 < num.length && num[mid + 1] == target){
                    return mid+1;
                } else{
                    return mid - 1;
                }
            }
        }
        
        return -1;
    }
}
