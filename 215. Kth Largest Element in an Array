// Runtime: 45 ms, faster than 5.03%
// Memory Usage: 41.3 MB, less than 30.78%

class Solution {
    public int findKthLargest(int[] nums, int k) {
        k = nums.length - k;
        int low = 0, high = nums.length - 1;
        
        while(low < high){
            int p = partition(nums, low, high);
            if(p < k){
                low = p + 1;
            } else if(p > k){
                high = p - 1;
            } else{
                break;
            }
        }
        
        return nums[k];
    }
    
    private int partition(int[] nums, int low, int high){
        int pivot = nums[high];
        int i = low;
        for(int j = low; j < high; j ++){
            if(nums[j] <= pivot){
                swap(nums, i, j);
                i ++;
            }
        }
        swap(nums, i, high);
        return i;
    }
    
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
