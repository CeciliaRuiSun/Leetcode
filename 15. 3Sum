// Runtime: 26 ms, faster than 62.18%
// Memory Usage: 56.5 MB, less than 31.62%

class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ret = new ArrayList<>();
        
        for(int i = 0; i < nums.length - 2; i ++){
            if(nums[i] > 0){
                break;
            }
            
            if(i == 0 || (nums[i] != nums[i - 1])){
                int lo = i + 1, hi = nums.length - 1;
                while(lo < hi){
                    if(nums[lo] + nums[hi] == 0 - nums[i]){
                        ret.add(Arrays.asList(nums[i], nums[lo], nums[hi]));
                        while(lo < hi && nums[lo + 1] == nums[lo]){lo ++;}
                        while(lo < hi && nums[hi - 1] == nums[hi]){hi --;}
                        lo ++;
                        hi --;
                    } else if(nums[lo] + nums[hi] > 0 - nums[i]){
                        hi --;
                    } else{
                        lo ++;
                    }
                }
            }
        }
        
        return ret;
    }
    
}
