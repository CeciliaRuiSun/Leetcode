// Runtime: 0 ms, faster than 100.00%
// Memory Usage: 38.6 MB, less than 89.19% 


class Solution {
    public int findMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        int left = 0, right = nums.length - 1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            min = Math.min(min, nums[mid]);
            
            if(nums[left] < nums[mid]){
                // left part is sorted                
                min = Math.min(min, nums[left]);
                left = mid + 1;
            } else if(nums[left] > nums[mid]){
                // right part is sorted, min is in left part
                right = mid -1;
            } else{
                left ++;     // [10,1,10,10,10]
            }
        }
        
        return min;
    }
}


//
class Solution {
    public int findMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        int left = 0, right = nums.length - 1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            if(nums[mid] < min){
                min = nums[mid];
            }
            
            if(nums[left] < nums[mid]){
                // left part is sorted
                
                if(nums[left] < nums[right] && nums[left] < min){
                    // min = nums[left]
                    min = nums[left];
                    break;
                } else{
                    // min in right part;
                    left = mid + 1;
                }
            } else if(nums[left] > nums[mid]){
                // right part is sorted, min is in left part
                right = mid -1;
            } else{
                left ++;
            }
        }
        
        return min;
    }
}
