class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> ret = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
    
        int[] pre = intervals[0];
        
        for(int[] cur: intervals){
            if(pre[1] < cur[0]){
                // when there is no overlap
                ret.add(pre);
                pre = cur;
            } else{
                // there is overlap
                pre[0] = Math.min(pre[0], cur[0]);
                pre[1] = Math.max(pre[1], cur[1]);
            }
        }
        
        ret.add(pre);
        int[][] result = new int[ret.size()][2];
        for(int i = 0; i < ret.size(); i ++){
            result[i] = ret.get(i);
        }
        
        return result;
    }
}



//
class Solution {
    public int[][] merge(int[][] intervals) {
        
        // sort by start point using lambda comparator
        List<int[]> ret = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
    
        int[] interval = intervals[0];
        ret.add(interval);
        for(int[] newinterval: intervals){
            if(newinterval[0] > interval[1]){
                ret.add(newinterval);
                interval = newinterval;
            } else{
                interval[1] = Math.max(interval[1], newinterval[1]);
            }
        }
        
        // convert 2-dimension arraylist to array
        return ret.toArray(new int[ret.size()][]);
    }
}
