// Runtime: 3 ms, faster than 67.01% 
// Memory Usage: 40.2 MB, less than 21.97%

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        if(root == null){
            return new LinkedList<>();
        }
        List<List<Integer>> ret = new LinkedList<>();
        
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> col = new LinkedList<>();
        queue.add(root);
        col.add(0);
        
        Map<Integer, List<Integer>> map = new HashMap<>();
        int min = 0, max = 0;
        
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            int c = col.poll();
            
            map.putIfAbsent(c, new LinkedList<>());
            map.get(c).add(temp.val);
            
            if(temp.left != null){
                queue.add(temp.left);
                col.add(c - 1);
                min = Math.min(min, c - 1);
            }
            if(temp.right != null){
                queue.add(temp.right);
                col.add(c + 1);
                max = Math.max(max, c + 1);
            }                      
        }
        
        for(int i = min; i <= max; i ++){
            ret.add(map.get(i));
        }
        
        return ret;
    }
}
