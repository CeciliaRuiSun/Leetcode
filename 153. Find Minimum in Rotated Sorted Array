// Runtime: 0 ms, faster than 100.00%
// Memory Usage: 38.6 MB, less than 53.55%

class Solution {
    public int findMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        int left = 0, right = nums.length - 1;
        if(nums[left] < nums[right]){
            // nums is not rotated
            return nums[left];
        }
        
        while(left <= right){
            
            int mid = left + (right - left)/2;
            
            if(nums[mid] < min){
                min = nums[mid];
            }
            
            //System.out.println("left: " + nums[left] + " right: " + nums[right] + " mid: " + nums[mid] + " min: " + min);
            
            if(nums[left] < nums[mid]){
                // left part is sorted 
                if(nums[left] < nums[right]){
                    // left part is sorted, left is possibly min
                    if(nums[left] < min){
                        min = nums[left];
                    }
                    break;
                } else{
                    // min in right part
                    left = mid + 1;
                }
            } else if(nums[left] > nums[mid]){
                // min in left part
                right = mid - 1;
            } else{
                left ++;
            }
        }
        
        return min;
    }
}
