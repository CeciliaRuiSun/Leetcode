class Solution {
    public int trap(int[] height) {
        int ret = 0;
        if(height == null || height.length == 0) return ret;
        
        int n = height.length;
        int[] maxLeft = new int[n];
        maxLeft[0] = 0;
        int[] maxRight = new int[n];
        maxRight[n - 1] = 0;
        int[] minHeight = new int[n];
        
        for(int i = 1; i < n; i ++){
            maxLeft[i] = Math.max(maxLeft[i - 1], height[i - 1]);
        }
        
        for(int i = n - 2; i >= 0; i --){
            maxRight[i] = Math.max(maxRight[i + 1], height[i + 1]);
        }
        
        for(int i = 0; i < n; i ++){
            minHeight[i] = Math.min(maxLeft[i], maxRight[i]);
            if(minHeight[i] > height[i]){
                ret += minHeight[i] - height[i];
            }
        }
        
        return ret;
    }
}
