// Runtime: 0 ms, faster than 100.00%
// Memory Usage: 39 MB, less than 36.64% 

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        
        Map<Node, Node> map = new HashMap<>();
        Node newNode = head;
        
        // loop through nodes
        while(newNode != null){
            map.put(newNode, new Node(newNode.val));
            newNode = newNode.next;
        }
        
        // assign next and random
        newNode= head;
        while(newNode != null){
            map.get(newNode).next = map.get(newNode.next);
            map.get(newNode).random = map.get(newNode.random);
            newNode = newNode.next;
        }
        
        return map.get(head);
    }
}
