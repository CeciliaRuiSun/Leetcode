//   1,2,5,8,7,6,3    1) find the 1st item from the right that nums[i] < nums[i + 1]
//-->1,2,6,8,7,5,3    2) swap nums[i] with the next number that is greater than it
//-->1,2,6,3,5,7,8    3) reorder numbers after nums[i]


class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;
        
        while(i >= 0){
            if(nums[i] < nums[i + 1]){       // find nums[i]
                int j = n - 1;
                while(j >= i){               // find nums[j] > nums[i] and swap them
                    if(nums[j] > nums[i]) break;
                    j -- ;
                }
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                break;
            }
            i --;
        }
        
        int left = i + 1, right = n - 1;      // reorder
        while(left < right){
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left ++;
            right --;
        }
        
        
    }
}


// Runtime: 1 ms, faster than 60.61% 
// Memory Usage: 40.5 MB, less than 23.66%

class Solution {
    public void nextPermutation(int[] nums) {
        for(int i = nums.length - 1; i > 0; i --){
           // System.out.println("i: " + i);
            if(nums[i - 1] < nums[i]){
                int j = nums.length - 1;
                while(true){
                    if(nums[j] > nums[i - 1]){
                        swap(nums, j, i-1);
                        break;
                    }
                    j --;
                }
                reorder(nums, i, nums.length - 1);
                return;
            }
        }
        
        reorder(nums, 0, nums.length - 1);
    }
    
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private void reorder(int[] nums, int i, int j){
        int left = i, right = j;
        while(left < right){
            swap(nums, left, right);
            left ++;
            right --;
            
        }
    }
}
