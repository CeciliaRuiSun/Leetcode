class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        
        List<int[]> ls = new ArrayList<>();
        int[] pre = newInterval;
        for(int[] cur: intervals){
            if(pre[1] < cur[0]){
                // when pre comes earlier than cur
                ls.add(pre);
                pre = cur;
            } else if(cur[1] < pre[0]){
                // when cur comes earlier than pre
                ls.add(cur);
            } else{
                // when there is overlap
                pre[0] = Math.min(cur[0], pre[0]);
                pre[1] = Math.max(cur[1], pre[1]);
            }
        }
        
        ls.add(pre);
        
        int[][] ret = new int[ls.size()][2];
        for(int i = 0; i < ls.size(); i++){
            ret[i] = ls.get(i);
        }
        
        return ret;
    }
}

//
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> ls = new LinkedList<>();
        int start = newInterval[0];
        int end = newInterval[1];
    
        int i = 0;
        while(i < intervals.length && intervals[i][1] < start){
            ls.add(intervals[i]);
            i ++;
        }
        
        while(i < intervals.length && intervals[i][0] <= end){
            start = Math.min(intervals[i][0], start);
            end = Math.max(intervals[i][1], end);
            i++;
        }
        
        ls.add(new int[]{start, end});
        
        while(i < intervals.length){
           ls.add(intervals[i]); 
            i++;
        }
        
        int[][] ret = new int[ls.size()][];
        for(int j = 0; j < ls.size(); j ++){
            ret[j] = ls.get(j);
        }
        
        return ret;
    }
}


// mark start of an interval as 1, end of interval as -1
// using an variable x, initialized as 0, if x = 0 and axis[i] > 0 then this is a start of a final interval; if x = 1 and axis[i] = -1 then
// this is an end of a final interval
// can not deal with when newInterval is a single point like [0, 0]

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int len = intervals.length;
        int[] axis = new int[100001]; // 0 -- min
        
        for(int[] cur: intervals){
            int start = cur[0];
            int end = cur[1];
            
            axis[start] = 1;
            axis[end] = -1;
        }
        
        axis[newInterval[0]] ++;   // in case newInterval[0] is a duplicate
        axis[newInterval[1]] --;
        
        int x = 0;
        int i = 0;
        List<int[]> ls = new ArrayList<>();
        while(i < axis.length){
            int left = 0, right = 0;
            if(x == 0 && axis[i] > 0){       // we find start of the interval
                left = i;
                x += axis[i];
                i ++;
                while(i < axis.length && (x!=1 || axis[i]!=-1)){    // loop until we find the end
                    if(axis[i] > 0){
                        x += axis[i];
                    } else if(axis[i] < 0){
                        x += axis[i];
                    }
                    i ++;
                }
                right = i;
                x --;
                ls.add(new int[]{left, right});
            }
            i++;
        }
        
        int[][] ret = new int[ls.size()][2];
        for(int j = 0; j < ls.size(); j++){
            ret[j] = ls.get(j);
        }
        
        return ret;
    }
}


//python solution
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x:x[0])
        merged = []

        for interval in intervals:
            if not merged or merged[-1][1] < interval[0]:
                # merged is empty or there is no overlap
                merged.append(interval)
            else:
                # there is overlap
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged

