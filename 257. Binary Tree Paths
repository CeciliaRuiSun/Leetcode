// String is costly. Runtime: 22 ms, faster than 5.33%
// Memory Usage: 43.3 MB, less than 5.38%

class Solution {  
   public List<String> binaryTreePaths(TreeNode root) {
        List<String> ret = new LinkedList<>();
        dfs(root, "", ret);
       return ret;
   }
    
    private void dfs(TreeNode root, String cur, List<String> ret){
        if(root == null) return;
        cur += root.val;
        if(root.left == null && root.right == null){
            ret.add(cur);
            return;
        }
        
        if(root.left != null){
            dfs(root.left, cur + "->", ret);
        }
        
        if(root.right != null){
            dfs(root.right, cur + "->", ret);
        }
    }
}


// use stringbuilder
// Runtime: 1 ms, faster than 99.88%
// Memory Usage: 43 MB, less than 5.38% 
class Solution {  
   public List<String> binaryTreePaths(TreeNode root) {
        List<String> ret = new LinkedList<>();
        dfs(root, new StringBuilder(), ret);
        return ret;
   }
    
    private void dfs(TreeNode root, StringBuilder cur, List<String> ret){
        if(root == null) return;
        
        int len = cur.length();
        cur.append(root.val);
        
        if(root.left == null && root.right == null){
            ret.add(cur.toString());
        } else{
            cur.append("->");
            dfs(root.left, cur, ret);
            dfs(root.right, cur, ret);
        }
        cur.setLength(len);
        
    }
}
