public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if(head == null) return head;
        
        ListNode sentinal = new ListNode(0);
        sentinal.next = head;
        ListNode cur = head, pre = sentinal;
        
        while(cur != null){
            if(cur.val == val){
                pre.next = cur.next;
            } else{
                pre = pre.next;
            }
            cur = cur.next;
        }
       
        return sentinal.next;
    }
}



// Runtime: 2 ms, faster than 14.45%
// Memory Usage: 46.5 MB, less than 5.06%

class Solution {
    public ListNode removeElements(ListNode head, int val) {
        while(head != null && head.val == val){
            head = head.next;
        }
        
        if(head == null){
            return head;
        }
        
        ListNode pointer = head;
        while(pointer.next != null && pointer.next.next != null){
            if(pointer.next.val == val){
                pointer.next = pointer.next.next;
                continue;
            } else{
                pointer = pointer.next;
            }
        }
        
        if(pointer.next != null && pointer.next.val == val){
            pointer.next = null;
        }
        
        return head;
    }
}
