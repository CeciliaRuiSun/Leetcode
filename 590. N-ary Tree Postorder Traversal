/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> postorder(Node root) {
        if(root == null){
            return new ArrayList<>();
        }
        List<Integer> ret = helper(new ArrayList<>(), root);
        ret.add(root.val);
        return ret;
    }
    
    private List<Integer> helper(List<Integer> ret, Node root){
        if(root == null){
            return ret;
        }
        
        for(Node n: root.children){
            helper(ret, n);
            ret.add(n.val);
        }
        
        return ret;
    }
}

// solution2

class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> ret = new LinkedList<>();
        dfs(root, ret);       
        return ret;
    }
    
    private void dfs(Node root, List<Integer> ls){
        if(root == null) return;        
        for(Node child: root.children){
            dfs(child, ls);
        }       
        ls.add(root.val);        
    }        
}
