/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//Reference:https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74253/Easy-to-understand-Java-Solution

public class Codec {
    private static final String spliter = ",";
    private static final String NN = "n";

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        encode(root, sb);
        return sb.toString();
    }
    
    private void encode(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append(NN).append(spliter);
        } else{
            sb.append(root.val).append(spliter);
            encode(root.left, sb);
            encode(root.right, sb);
        }
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Deque<String> nodes = new LinkedList<>();
        nodes.addAll(Arrays.asList(data.split(spliter)));
        return decode(nodes);
    }
    
    private TreeNode decode(Deque<String> nodes){
        String val = nodes.poll();
        if(val.equals(NN)) {
            return null;
        } else{
            TreeNode node = new TreeNode(Integer.valueOf(val));
            node.left = decode(nodes);
            node.right = decode(nodes);
            return node;
        }
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
