// Runtime: 1 ms, faster than 99.98% 
// Memory Usage: 39.5 MB, less than 61.22%

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ret = new LinkedList<>();
        dfs(root, targetSum, ret, new ArrayList<>());
        return ret;
    }
    
    private void dfs(TreeNode root, int sum, List<List<Integer>> ret, List<Integer> cur){
        if(root == null) return;
        
        cur.add(root.val);
        
        if(root.left == null && root.right == null && root.val == sum){
            ret.add(new ArrayList<>(cur));
        }
        
        dfs(root.left, sum-root.val, ret, cur);
        dfs(root.right, sum-root.val, ret, cur);
        cur.remove(cur.size() - 1);
    }
}
