// Runtime: 49 ms, faster than 10.39%
// Memory Usage: 40.2 MB, less than 9.68% 

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {    
    public Node cloneGraph(Node node) {
        if(node == null) return null;
        
        Node newNode = new Node(node.val, new ArrayList<>());
        HashMap<Node, Node> map = new HashMap(); // key is the ORIGINAL node, value is the new node;
        
        // add starting node to HashMap
        map.put(node, newNode);
        
        Queue<Node> queue = new LinkedList();
        
        // add starting node to the queue
        queue.add(node);
        
        while(!queue.isEmpty()){
            Node polledOrigNode = queue.poll();
            
            for(Node origNeighbor: polledOrigNode.neighbors){
                if(!map.containsKey(origNeighbor)){
                    // add neighborNode, e.g 2,4 to map and queue;
                    Node newNeighborNode = new Node(origNeighbor.val, new ArrayList<>());
                    map.put(origNeighbor, newNeighborNode);
                    queue.add(origNeighbor);  // add 2, 4
                }
                
                // add 2copy, 4copy to newNodecopy's neighbor
                map.get(polledOrigNode).neighbors.add(map.get(origNeighbor));
            }
        }
        
        return newNode;
        
    }
       
    
}
