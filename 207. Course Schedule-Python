--- topological sort

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # put [i, i's precourses] to a list
        precourses = [[] for i in range(numCourses)]
        # each node i's indegree --> indegree[i]
        indegree = [0] * numCourses
        
        for crs, pre in prerequisites:
            indegree[pre] += 1
            precourses[crs].append(pre)
        
        q = deque()
        for i in range(numCourses):
            if indegree[i] == 0:
            # start with nodes with 0 indegree
                q.append(i)
        
        while q:
            cur = q.popleft()
            for pre in precourses[cur]:
            # remove edge and decrease indegree of cur's precourses, if there is a new one's indegree is 0, add it to the queue
                indegree[pre] -= 1
                if indegree[pre] == 0:
                    q.append(pre)
                    
        
        for i in indegree:
        # return false if there is still edge/a node with indegree > 0
            if i != 0:
                return False
        
        return True
