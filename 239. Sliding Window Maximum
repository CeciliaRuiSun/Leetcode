class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int len = nums.length;
        int[] ret = new int[len - k + 1];
        
        // pq stores index i, but ordered by nums[i]
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> Integer.compare(nums[b], nums[a]));
        
        for (int i = 0; i < len; i ++){
            if(i < k){
                pq.offer(i);
                continue;
            }
            while (i - k > pq.peek()) {
                pq.poll();
            }
            ret[i - k] = nums[pq.peek()];
            pq.offer(i);
           
        }
        while (len - k > pq.peek()) {
            // use poll() instead of remove(), time complexity of remove is O(N)
                pq.poll();
        }
        ret[len - k] = nums[pq.peek()];
        
        return ret;
    }
}


// solution 2
// use deque
class Solution {
    //https://leetcode.com/problems/sliding-window-maximum/discuss/458121/Java-All-Solutions-(B-F-PQ-Deque-DP)-with-Explanation-and-Complexity-Analysis
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 0 || k == 0) return nums;

        int n = nums.length;
        int[] ret = new int[n - k + 1]; // number of windows
        Deque<Integer> deque = new ArrayDeque<>();
        
        for(int i = 0; i < nums.length; i++){
            while(deque.size() > 0 && deque.peekFirst() <= i - k){
                deque.pollFirst();
            }
            
            while(deque.size() > 0 && nums[deque.peekLast()] < nums[i]){
                deque.pollLast();
            }
            
            deque.addLast(i);
            if(i - (k - 1) >= 0){
                ret[i - (k - 1)] = nums[deque.peekFirst()];
            }
        }
        
        return ret;
    }
}
