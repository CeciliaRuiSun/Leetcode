// Runtime: 4 ms, faster than 100.00% 
// Memory Usage: 41.2 MB, less than 59.44% 
// https://www.youtube.com/watch?v=XhLMEiZWEZ4

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q){
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        if(left == null){
            return right;
        } else if(right == null){
            return left;
        } else{
            return root;
        }
        
        // if root is not null or root is not one of p or q, we look for its left and right child and return based on what left and right child is
        /*
        if(left == null && right == null) {
            return null;
        } else if(left == null){
            return right;
        } else if(right == null){
            return left;
        } else{
            return root;
        }
        */
    }
}
